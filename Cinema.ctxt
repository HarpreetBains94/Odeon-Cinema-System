#BlueJ class context
comment0.params=screenCount
comment0.target=Cinema(int)
comment0.text=\r\n\ Initializes\ a\ new\ Cinema\ object\ with\ the\ number\ of\ screens\ provided.\r\n\r\n\ @param\ screenCount\ int.\r\n
comment1.params=showing
comment1.target=void\ addshowing(Showing)
comment1.text=\r\n\ Creates\ a\ new\ Showing\ object\ and\ adds\ it\ to\ the\ showings\ hashmap.\r\n\ mainly\ used\ for\ testing\ purposes.\r\n\r\n\ @param\ showing\ Showing\ to\ be\ added.\r\n\ @throws\ InvalidDateTimeException\r\n
comment10.params=
comment10.target=java.time.LocalDate\ getDateForAddShowing()
comment10.text=\r\n\ Returns\ a\ LocalDate\ object\ based\ on\ user\ input.\r\n\r\n\ @return\ LocalDate\ -\ date\ selected.\r\n\ @throws\ InvalidDateTimeException\r\n
comment11.params=
comment11.target=java.lang.String\ getTimeForAddShowing()
comment11.text=\r\n\ Returns\ a\ time\ from\ a\ list\ of\ pre\ set\ times\ based\ on\ user\ input.\r\n\ @return\ String\ -\ time\ selected.\r\n\ @throws\ NonValidOptionException\r\n
comment12.params=
comment12.target=void\ newCustomer()
comment12.text=\r\nCreates\ a\ new\ customer\ object\ based\ on\ user\ input.\r\n\r\n\ @throws\ CustomerError\r\n\ @throws\ InvalidDateTimeException\r\n\ @throws\ SeatBookError\r\n\ @throws\ NonValidOptionException\r\n
comment13.params=
comment13.target=Movie\ getMovieForNumCustomer()
comment13.text=\r\n\ Prints\ out\ available\ movies\ and\ prompts\ the\ user\ to\ select\ one.\r\n\ Onces\ on\ is\ selected\ it\ is\ returned.\r\n\r\n\ @return\ Movie\r\n\ @throws\ CustomerError\r\n
comment14.params=movie
comment14.target=Showing\ getDateForNewCustomer(Movie)
comment14.text=\r\n\ Prints\ out\ available\ dates/times\ for\ movie\ passed\ in.\ Then\ prompts\ user\ to\ select\r\n\ a\ date/time\ and\ returns\ the\ corresponding\ Showing.\r\n\r\n\ @param\ movie\ movie\ selected.\r\n\ @return\ Showing\ -\ showing\ selected\ based\ on\ input\ movie\ and\ selected\ date\ and\ time.\r\n\ @throws\ InvalidDateTimeException\r\n
comment15.params=movie
comment15.target=Showing\ getDateChangeBooking(Movie)
comment15.text=\r\n\ Finds\ showing\ based\ on\ input\ movie\ and\ date/time\ of\ showing.\r\n\r\n\ @param\ movie\ movie\ customer\ wishes\ to\ change\ date\ for.\r\n\ @return\ Showing\ -\ customers\ current\ showing.\r\n\ @throws\ InvalidDateTimeException\r\n
comment16.params=
comment16.target=Movie\ getMovie()
comment16.text=\r\n\ Lists\ available\ movies\ and\ prompts\ user\ to\ select\ one.\r\n\ Seleted\ movie\ is\ then\ returned.\r\n\r\n\ @return\ Movie\ -\ selected\ movie.\r\n\ @throws\ NonValidOptionException\r\n
comment17.params=
comment17.target=boolean\ getPaymentType()
comment17.text=\r\n\ Prompts\ user\ to\ enter\ either\ card\ or\ cash\ as\ payment\ for\ customer.\r\n\r\n\ @return\ boolean.\ True\ -\ card,\ False\ -\ cash.\r\n\ @throws\ NonValidOptionException\r\n
comment18.params=
comment18.target=void\ removeMovie()
comment18.text=\r\n\ Prompts\ user\ to\ select\ movie\ from\ movies\ currently\ playing,\ and\ removes\ it.\r\n\ @throws\ NonValidOptionException\r\n
comment2.params=
comment2.target=void\ addShowing()
comment2.text=\r\n\ Creates\ new\ Showing\ object\ where\ the\ data\ for\ the\ showing\ is\ input\ by\ the\ user\r\n\ instead\ of\ passing\ in\ a\ Showing\ object.\r\n
comment3.params=
comment3.target=java.lang.String\ returnHighestGrossingMovie()
comment3.text=\r\n\ Goes\ through\ showings\ hashmap,\ totals\ the\ number\ of\ booked\ seats\ per\ showing\r\n\ for\ each\ movie\ and\ returns\ the\ the\ highest\ grossing\ movie\ and\ how\ much\ it\ grossed.\r\n\r\n\ @return\ String\ -\ Highest\ grossing\ movie\ and\ amount\ grossed.\r\n
comment4.params=
comment4.target=java.lang.String\ returnReviewsAndRatings()
comment5.params=
comment5.target=java.lang.String\ returnViewNumbersAndRating()
comment5.text=\r\n\ Goes\ through\ showings\ hashmap\ and\ finds\ the\ number\ of\ spectators\ and\ average\r\n\ rating\ per\ movie.\r\n\r\n\ @return\ String\ -\ List\ of\ movies\ combined\ with\ their\ viewer\ count\ and\ average\ rating.\r\n
comment6.params=dateInput
comment6.target=java.time.LocalDate\ convertStringToDate(java.lang.String)
comment6.text=\r\n\ Converts\ String\ entered\ (if\ formatted\ as\ dd/mm/yyyy)\ as\ a\ LocalDate\ object.\r\n\r\n\ @param\ dateInput\ String\ -\ Date\ in\ format\ dd/mm/yyyy.\r\n\ @return\ LocalDate\ for\ the\ date\ given\ by\ String.\r\n\ @throws\ InvalidDateTimeException\r\n
comment7.params=movie\ time\ date
comment7.target=Showing\ getShowing(Movie,\ java.lang.String,\ java.time.LocalDate)
comment7.text=\r\n\ Returns\ a\ showing\ if\ one\ exists\ based\ on\ the\ movie,\ time,\ and\ date\ supplied.\r\n\ mainly\ used\ for\ testing\ purposes.\r\n\r\n\ @param\ movie\ Movie\ -\ movie\ you\ wish\ to\ find\ a\ showing\ for.\r\n\ @param\ time\ String\ -\ time\ you\ wish\ to\ find\ a\ showing\ for.\r\n\ @param\ date\ LocalDate\ -\ date\ you\ wish\ to\ find\ a\ showing\ for.\r\n\ @return\ Showing\r\n\ @throws\ NonValidOptionException\r\n
comment8.params=
comment8.target=Movie\ getMovieForAddShowing()
comment8.text=\r\n\ Creates\ and\ returns\ a\ new\ Movie\ object\ based\ on\ user\ input.\r\n\r\n\ @return\ Movie\r\n
comment9.params=date\ time
comment9.target=int\ getScreenNoForAddShowing(java.time.LocalDate,\ java.lang.String)
comment9.text=\r\n\ Lists\ the\ available\ screens\ at\ a\ given\ time\ and\ date.\ User\ can\ then\ select\ a\ screen\ number\r\n\ which\ will\ be\ returned.\r\n\r\n\ @param\ date\ LocalDate\ -\ date\ you\ wish\ to\ check\ screen\ availability\ for.\r\n\ @param\ time\ String\ \=\ time\ you\ wish\ to\ check\ screen\ availability\ for.\r\n\ @return\ int\ -\ screen\ number\ selected.\r\n\ @throws\ NonValidOptionException\r\n
numComments=19
